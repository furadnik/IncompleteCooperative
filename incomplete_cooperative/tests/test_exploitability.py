from unittest import TestCase

import numpy as np

from ..coalitions import Coalition, all_coalitions, grand_coalition
from ..exploitability import MaxGainGame, compute_exploitability
from ..game import IncompleteCooperativeGame
from ..protocols import BoundableIncompleteGame, MutableGame, Value


def dummy_bounds(game: BoundableIncompleteGame) -> None:
    """Compute dummy bounds."""
    game.set_upper_bounds(np.ones(2**game.number_of_players, dtype=Value))
    game.set_lower_bounds(np.zeros(2**game.number_of_players, dtype=Value))


def dummy_fill(game: MutableGame) -> None:
    """Compute dummy bounds."""
    for coalition in all_coalitions(game):
        game.set_value(len(coalition), coalition)


class TestExploitability(TestCase):

    def setUp(self) -> None:
        self.game = IncompleteCooperativeGame(6, dummy_bounds)
        self.game.set_known_values([1], [grand_coalition(self.game)])
        self.game.compute_bounds()

    def test_one_max_gain_value(self):
        max_gain = MaxGainGame(self.game, 0)
        self.assertEqual(max_gain.get_value(Coalition.from_players([0])), 1)
        self.assertEqual(max_gain.get_value(Coalition.from_players([3])), 0)

    def test_empty_game(self):
        n = self.game.number_of_players
        self.assertEqual(compute_exploitability(self.game),
                         n - 1)

    def test_full_game(self):
        dummy_fill(self.game)
        self.assertEqual(compute_exploitability(self.game), 0)
