#!/usr/bin/env python3
"""A script that combines exploitabilities of different runs into one file.

Usage:
    ./scripts/exploitability_combiner.py <starting-path>
"""
import json
import sys
from pathlib import Path
from typing import Any, Iterator

import matplotlib as mpl  # type: ignore
import matplotlib.pyplot as plt  # type: ignore
import numpy as np
from matplotlib import colormaps

from incomplete_cooperative.run.save import Output
from scripts.find_data_jsons import find_data_jsons

CMAP = colormaps["inferno"]


def get_colors(number: int) -> Iterator:
    """Get colors from CMAP."""
    return map(CMAP, map(lambda x: (x + 1) / (number + 2), range(number)))


def add_to_plt(data: np.ndarray, name: str, color: Any) -> Any:
    """Add data drawing to plot."""
    data_length = data.shape[0]
    mean = np.mean(data, 1)
    stde = np.std(data, 1)
    line = plt.plot(
        range(data_length), mean, color=color, zorder=4, label=name)[0]
    plt.fill_between(
        range(data_length), mean + stde, mean - stde, color=color, zorder=3, alpha=0.3)
    return line


mpl.rcParams.update({
    'axes.labelsize': 16,
    'font.size': 16,
    'legend.fontsize': 10,
    'xtick.labelsize': 12,
    'ytick.labelsize': 12,
    'figure.figsize': [6.5, 5.5]
})


NAME_MAP = {
    "random_eval": "Random",
    "eval": "PPO",
    "solve_greedy": "Local Optimal",
    "best_states": "Global Optimal",
}


def draw_combined_graph(exploitabilities: list[tuple[str, np.ndarray]], output_path: Path, title: str) -> None:
    """Draw data into a combined graph."""
    colors = get_colors(len(exploitabilities))
    plt.grid(zorder=-1, alpha=.3)
    plt.ylim(bottom=0, top=max(np.max(x) for _, x in exploitabilities))
    plt.xlim((0, exploitabilities[0][1].shape[0] - 1))
    lines = []
    for name, exploitability in exploitabilities:
        color = next(colors)
        lines.append(add_to_plt(exploitability, NAME_MAP.get(name, name), color))
    plt.legend(handles=lines)
    plt.axvline(5, linestyle='--', alpha=.6, c="gray")  # TODO: implement later.
    plt.title(title, family="monospace")
    plt.xlabel("Steps")
    plt.ylabel("Exploitability")
    plt.savefig(output_path)
    plt.close('all')


def main(path: Path = Path(sys.argv[1]), title: str = sys.argv[2]) -> None:
    """Run the script."""
    for data in find_data_jsons(path):
        save_path = data.parent / "combined_exploitabilities.pdf"
        with data.open("r") as f:
            data_keys = json.load(f).keys()

        # a tuple (name, exploitabilities) of all runs
        exploitabilities = [(x, Output.from_file(data, x).exploitability) for x in data_keys]
        draw_combined_graph(exploitabilities, save_path, title)


if __name__ == '__main__':
    main()
