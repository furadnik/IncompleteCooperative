#!/usr/bin/env python3
"""A script that combines exploitabilities of different versions of runs into one file.

Usage:
    ./scripts/grap_last_exploitabilities.py <starting-path>
"""
import json
import sys
from pathlib import Path
from typing import Any

import matplotlib.pyplot as plt  # type: ignore
import numpy as np

from incomplete_cooperative.run.save import Output
from scripts.find_data_jsons import find_data_jsons
from scripts.plot_base import NAME_MAP, filter_func, get_colors


def add_to_plt(data: np.ndarray, labels: list[int], name: str, color: Any, line: str) -> Any:
    """Add data drawing to plot."""
    mean = np.mean(data, 1)
    stde = np.std(data, 1)
    line = plt.plot(
        labels, mean, color=color, zorder=4, label=name, linestyle=line)[0]
    plt.fill_between(
        labels, mean + stde, mean - stde, color=color, zorder=3, alpha=0.3)
    return line


def sort_graph(x: list[int], y: np.ndarray) -> tuple[list[int], np.ndarray]:
    """Sort graph values."""
    print(x, y)
    if len(x) < 2:
        return x, y
    sorted_x = sorted(x)
    sorted_y_indices = list(map(lambda z: z[0], sorted(enumerate(x), key=lambda z: z[1])))
    sorted_y = y[sorted_y_indices]
    print(sorted_x, sorted_y)
    return sorted_x, sorted_y


def draw_data(data: list[tuple[str, list[int], np.ndarray]], path: Path) -> None:
    """Save the data to file."""
    colors = get_colors(len(data))
    plt.grid(zorder=-1, alpha=.3)
    plt.ylim(bottom=0, top=max(np.max(x) for _, _, x in data))
    plt.xlim((min(min(x) for _, x, _ in data), max(max(x) for _, x, _ in data)))

    lines = []
    for name, x, y in data:
        if not x:
            continue
        x, y = sort_graph(x, y)
        color, line = next(colors)
        print(name, np.mean(y, 1))
        lines.append(add_to_plt(y, x, NAME_MAP.get(name, name), color, line))

    plt.legend(handles=lines)
    plt.title("Exploitability at n choose 2", family="monospace")  # TODO: implement later.
    plt.xlabel("Number of players")
    plt.ylabel("Utopian gap")
    plt.savefig(path)
    plt.close('all')


def gather_data(path: Path) -> list[tuple[str, list[int], np.ndarray]]:
    """Gather data.

    Returns a list of tuples:
        the list of number positions,
        the name,
        the values.
    """
    r: dict[str, tuple[list[int], np.ndarray]] = {}
    for data in find_data_jsons(path):
        with data.open("r") as f:
            data_keys = json.load(f).keys()

        for name in data_keys:
            if not filter_func(name):
                continue
            output = Output.from_file(data, name)
            last_out_data = output.data[-1]
            number = output.parsed_args.number_of_players
            if name in r.keys() and number in r[name][0]:
                continue
            elif name not in r.keys():
                r[name] = [number], last_out_data.copy().reshape((1, last_out_data.shape[0]))
            else:
                r[name] = r[name][0] + [number], np.vstack((r[name][1], last_out_data))

    return [(k, *v) for k, v in r.items()]


def main(path: Path = Path(sys.argv[1]), title: str = sys.argv[2]) -> None:
    """Run the script."""
    data = gather_data(path)
    save_path = path / "combined_last_exploitabilities.pdf"
    draw_data(data, save_path)


if __name__ == '__main__':
    main()
