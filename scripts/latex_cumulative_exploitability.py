#!/usr/bin/env python3
"""A script that combines exploitabilities of different runs into one file.

Usage:
    ./scripts/exploitability_combiner.py <starting-path>
"""
import json
import sys
from pathlib import Path
from typing import Iterable

import numpy as np
import scipy

from incomplete_cooperative.run.save import Output
from scripts.find_data_jsons import find_data_jsons
from scripts.plot_base import filter_func


def draw_combined_graph(exploitabilities: list[tuple[str, np.ndarray]]) -> None:
    """Draw data into a combined graph."""
    lines: list[Iterable] = [list(range(len(exploitabilities[0][1])))]
    names: list[str] = ["step"]
    for name, exploitability in exploitabilities:
        names.append(name)
        lines.append(np.mean(exploitability, 1))
        names.append(name + "_err")
        lines.append(scipy.stats.sem(exploitability, 1))
        assert len(scipy.stats.sem(exploitability, 1).shape) == 1
    print(" ".join(names))
    for x in zip(*lines):
        print(*x)


def main(path: Path = Path(sys.argv[1])) -> None:
    """Run the script."""
    for data in find_data_jsons(path):
        with data.open("r") as f:
            data_keys = json.load(f).keys()

        # a tuple (name, exploitabilities) of all runs (possibly filtered by the specified names in arg 3)
        exploitabilities = [(x, Output.from_file(data, x).data) for x in data_keys if filter_func(x)]
        draw_combined_graph(exploitabilities)


if __name__ == '__main__':
    main()
